import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os # Th√™m th∆∞ vi·ªán os ƒë·ªÉ l√†m vi·ªác v·ªõi file
from io import BytesIO # Th√™m th∆∞ vi·ªán io
from utils.auth import check_password
# ========================== C·∫§U H√åNH TRANG ==========================
st.set_page_config(layout="wide")
check_password()
# ========================== C√ÅC H√ÄM PH·ª§ TR·ª¢ (FALLBACK & HELPERS) ==========================
# Gi·ªØ nguy√™n c√°c h√†m c·ªßa b·∫°n, ƒë·∫£m b·∫£o code ch·∫°y ƒë·ªôc l·∫≠p
try:
    from utils.data_processing import extract_camp_blocks
    from utils.helpers import to_excel
except ImportError:
    # Fallback function if utils are not found
    def extract_camp_blocks(df):
        all_data = []
        current_camp = None
        date_cols = []
        for i, row in df.iterrows():
            if str(row.iloc[0]).lower().strip() == 'camp':
                current_camp = str(row.iloc[1]).strip() if pd.notnull(row.iloc[1]) else None
                date_cols = [v for v in row.iloc[2:].dropna() if str(v).strip().lower() != "t·ªïng" and not str(v).strip().lower().startswith("t·ªïng")]
                continue
            if current_camp and pd.notnull(row.iloc[1]) and str(row.iloc[1]).strip() != "":
                criteria = str(row.iloc[1]).strip()
                for idx, date in enumerate(date_cols):
                    value = row.iloc[idx + 2] if (idx + 2) < len(row) else None
                    if pd.isnull(value) or str(value).strip() == '':
                        value = 0
                    if pd.notnull(date):
                        all_data.append({'campaign': current_camp, 'criteria': criteria, 'date': date, 'value': value})
        return pd.DataFrame(all_data)

    def to_excel(df):
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='FilteredData')
        # writer.save() # This is deprecated and handled by with statement
        return output.getvalue()

# --- B·∫ÆT ƒê·∫¶U PH·∫¶N C·∫¢I TI·∫æN: H√ÄM L∆ØU/T·∫¢I LINK ---
LINK_FILE_AD = "temp_ad_gsheet_link.txt"

def save_link_ad(link):
    """L∆∞u link Google Sheet c·ªßa trang qu·∫£ng c√°o v√†o file t·∫°m."""
    try:
        with open(LINK_FILE_AD, "w") as f:
            f.write(link)
    except Exception as e:
        st.sidebar.warning(f"Kh√¥ng th·ªÉ l∆∞u link: {e}")

def load_link_ad():
    """ƒê·ªçc link ƒë√£ l∆∞u t·ª´ file t·∫°m n·∫øu c√≥."""
    if os.path.exists(LINK_FILE_AD):
        try:
            with open(LINK_FILE_AD, "r") as f:
                return f.read().strip()
        except Exception as e:
            st.sidebar.warning(f"Kh√¥ng th·ªÉ ƒë·ªçc link ƒë√£ l∆∞u: {e}")
    return ""
# --- K·∫æT TH√öC PH·∫¶N C·∫¢I TI·∫æN ---


# ========================== C√ÅC H·∫∞NG S·ªê C·∫§U H√åNH ==========================
DEFAULT_SHEETS = "duyanh,duc"

def render_campaign_dashboard():
    """
    H√†m ch√≠nh ƒë·ªÉ render to√†n b·ªô giao di·ªán v√† logic c·ªßa dashboard Qu·∫£ng c√°o.
    """
    st.header("üìà Ph√¢n T√≠ch Hi·ªáu Su·∫•t Chi·∫øn D·ªãch Qu·∫£ng C√°o")

    # ========================== NH·∫¨P D·ªÆ LI·ªÜU (SIDEBAR) - ƒê√É C·∫¨P NH·∫¨T ==========================
    st.sidebar.header("Nh·∫≠p D·ªØ Li·ªáu Qu·∫£ng C√°o")
    
    data_source = st.sidebar.radio(
        "Ch·ªçn ngu·ªìn d·ªØ li·ªáu:",
        options=['Upload file Excel', 'Google Sheet (link public)'],
        horizontal=True,
        key="ad_source"
    )

    xls = None # Kh·ªüi t·∫°o bi·∫øn chung ƒë·ªÉ ch·ª©a d·ªØ li·ªáu Excel

    if data_source == 'Upload file Excel':
        uploaded_file = st.sidebar.file_uploader(
            "Ch·ªçn file Excel c·ªßa b·∫°n", 
            type=["xlsx", "xls"], 
            key="ad_uploader"
        )
        if uploaded_file:
            xls = pd.ExcelFile(uploaded_file)

    elif data_source == 'Google Sheet (link public)':
        saved_link = load_link_ad()
        sheet_url = st.sidebar.text_input(
            "D√°n link Google Sheet ƒë√£ public:", 
            value=saved_link, 
            key="ad_gsheet"
        )
        if sheet_url:
            if sheet_url != saved_link:
                save_link_ad(sheet_url)
            try:
                xlsx_export_url = sheet_url.replace('/edit?usp=sharing', '/export?format=xlsx').replace('/edit', '/export?format=xlsx')
                # D√πng engine='openpyxl' ƒë·ªÉ ƒë·ªçc file .xlsx t·ª´ URL
                xls = pd.ExcelFile(xlsx_export_url, engine='openpyxl')
            except Exception as e:
                st.error(f"L·ªói khi ƒë·ªçc Google Sheet. H√£y ch·∫Øc ch·∫Øn link l√† public v√† ƒë√∫ng ƒë·ªãnh d·∫°ng. L·ªói: {e}")

    if xls is None:
        st.info("üí° Vui l√≤ng cung c·∫•p d·ªØ li·ªáu (t·ª´ File Excel ho·∫∑c Google Sheet) ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        st.stop()
        
    # --- Ph·∫ßn ch·ªçn sheet gi·ªØ nguy√™n, nh∆∞ng s·∫Ω l·∫•y sheet t·ª´ `xls` object ---
    all_sheets_in_file = xls.sheet_names
    st.sidebar.write(f"File c√≥ {len(all_sheets_in_file)} sheet:")
    st.sidebar.write(all_sheets_in_file)

    sheets_input = st.sidebar.text_input(
        "Nh·∫≠p t√™n c√°c sheet c·∫ßn ph√¢n t√≠ch (ph√¢n t√°ch b·ªüi d·∫•u ph·∫©y):",
        value=", ".join(all_sheets_in_file), # G·ª£i √Ω t·∫•t c·∫£ c√°c sheet t√¨m th·∫•y
        key="ad_sheets"
    )
    sheets_to_read = [s.strip() for s in sheets_input.split(',') if s.strip()]
    st.sidebar.success(f"S·∫Ω ph√¢n t√≠ch c√°c sheet: {sheets_to_read}")


    # ========================== ƒê·ªåC & X·ª¨ L√ù D·ªÆ LI·ªÜU - ƒê√É C·∫¨P NH·∫¨T ==========================
    all_df = []
    for sheet in sheets_to_read:
        if sheet not in xls.sheet_names:
            st.warning(f"Sheet '{sheet}' kh√¥ng t·ªìn t·∫°i trong file. B·ªè qua...")
            continue
        try:
            # S·ª≠a l·∫°i: ƒê·ªçc t·ª´ object `xls` thay v√¨ `uploaded_file`
            df_raw = xls.parse(sheet, header=None) 
            df_extracted = extract_camp_blocks(df_raw)
            if not df_extracted.empty:
                df_extracted['sheet'] = sheet
                all_df.append(df_extracted)
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc ho·∫∑c x·ª≠ l√Ω sheet '{sheet}': {e}")

    if not all_df:
        st.error("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ b·∫•t k·ª≥ sheet n√†o. Vui l√≤ng ki·ªÉm tra t√™n sheet v√† ƒë·ªãnh d·∫°ng file.")
        st.stop()

    df_full = pd.concat(all_df, ignore_index=True)
    df_pivot = df_full.pivot_table(
        index=['sheet', 'campaign', 'date'],
        columns='criteria',
        values='value',
        aggfunc='first'
    ).reset_index()
    
    df_pivot['date'] = pd.to_datetime(df_pivot['date'], errors='coerce')
    df_pivot.dropna(subset=['date'], inplace=True) # Lo·∫°i b·ªè c√°c d√≤ng c√≥ ng√†y kh√¥ng h·ª£p l·ªá

    numeric_cols = [
        'Doanh s·ªë', 'ƒê·∫ßu t∆∞ ng√¢n s√°ch', 'KH Ti·ªÅm NƒÉng (Mess)', 
        'S·ªë L∆∞·ª£ng Kh√°ch H√†ng', 'S·ªë ƒë∆°n h√†ng'
    ]
    for col in numeric_cols:
        if col in df_pivot.columns:
            df_pivot[col] = pd.to_numeric(df_pivot[col], errors='coerce').fillna(0)
        else:
            df_pivot[col] = 0
            
    # ========================== B·ªò L·ªåC D·ªÆ LI·ªÜU (SIDEBAR) ==========================
    st.sidebar.header("B·ªô l·ªçc D·ªØ li·ªáu")
    
    # --- L·∫•y gi√° tr·ªã cho b·ªô l·ªçc ---
    min_date = df_pivot['date'].min().date()
    max_date = df_pivot['date'].max().date()
    unique_sheets = sorted(df_pivot['sheet'].unique())
    unique_campaigns = sorted(df_pivot['campaign'].unique())

    # --- T·∫°o c√°c widget l·ªçc ---
    selected_date_range = st.sidebar.date_input(
        "L·ªçc theo kho·∫£ng th·ªùi gian:",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date,
        format="DD/MM/YYYY"
    )
    
    selected_sheets = st.sidebar.multiselect("L·ªçc theo ng∆∞·ªùi ch·∫°y:", options=unique_sheets, default=unique_sheets)
    selected_campaigns = st.sidebar.multiselect("L·ªçc theo chi·∫øn d·ªãch:", options=unique_campaigns, default=unique_campaigns)
    
    # --- √Åp d·ª•ng b·ªô l·ªçc ---
    if len(selected_date_range) != 2:
        st.warning("Vui l√≤ng ch·ªçn ƒë·ªß ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c.")
        st.stop()

    start_date, end_date = selected_date_range
    
    df_filtered = df_pivot[
        (df_pivot['date'].dt.date >= start_date) &
        (df_pivot['date'].dt.date <= end_date) &
        (df_pivot['sheet'].isin(selected_sheets)) &
        (df_pivot['campaign'].isin(selected_campaigns))
    ]

    if df_filtered.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.")
        st.stop()

    # ========================== KPI T·ªîNG QUAN (D·ª∞A TR√äN D·ªÆ LI·ªÜU ƒê√É L·ªåC) ==========================
    # (Gi·ªØ nguy√™n to√†n b·ªô ph·∫ßn t√≠nh to√°n v√† hi·ªÉn th·ªã KPI c·ªßa b·∫°n)
    st.subheader("KPI T·ªïng quan (t·ª´ d·ªØ li·ªáu ƒë√£ l·ªçc)")
    tong_doanh_so = df_filtered['Doanh s·ªë'].sum()
    tong_ngan_sach = df_filtered['ƒê·∫ßu t∆∞ ng√¢n s√°ch'].sum()
    tong_kh_tiem_nang = df_filtered['KH Ti·ªÅm NƒÉng (Mess)'].sum()
    tong_kh_moi = df_filtered['S·ªë L∆∞·ª£ng Kh√°ch H√†ng'].sum()
    tong_don_hang = tong_kh_moi # Gi·∫£ ƒë·ªãnh c·ªßa b·∫°n
    roas = tong_doanh_so / tong_ngan_sach if tong_ngan_sach > 0 else 0
    chi_phi_tren_mess = tong_ngan_sach / tong_kh_tiem_nang if tong_kh_tiem_nang > 0 else 0
    chi_phi_tren_kh_moi = tong_ngan_sach / tong_kh_moi if tong_kh_moi > 0 else 0
    ty_le_chuyen_doi = (tong_kh_moi / tong_kh_tiem_nang) * 100 if tong_kh_tiem_nang > 0 else 0
    gia_tri_tb_don = tong_doanh_so / tong_don_hang if tong_don_hang > 0 else 0
    giao_dich_tb_moi_kh = tong_don_hang / tong_kh_moi if tong_kh_moi > 0 else 0

    row1_col1, row1_col2, row1_col3, row1_col4, row1_col5 = st.columns(5)
    row1_col1.metric("Doanh s·ªë", f"{tong_doanh_so:,.0f} VNƒê")
    row1_col2.metric("ƒê·∫ßu t∆∞ ng√¢n s√°ch", f"{tong_ngan_sach:,.0f} VNƒê")
    row1_col3.metric("ROAS", f"{roas:.2f}")
    row1_col4.metric("KH Ti·ªÅm NƒÉng (Mess)", f"{tong_kh_tiem_nang:,.0f}")
    row1_col5.metric("Chi ph√≠ / mess m·ªõi", f"{chi_phi_tren_mess:,.0f} VNƒê")

    row2_col1, row2_col2, row2_col3, row2_col4, row2_col5 = st.columns(5)
    row2_col1.metric("S·ªë L∆∞·ª£ng Kh√°ch H√†ng", f"{tong_kh_moi:,.0f}")
    row2_col2.metric("Chi ph√≠ / KH m·ªõi (CAC)", f"{chi_phi_tren_kh_moi:,.0f} VNƒê")
    row2_col3.metric("T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi", f"{ty_le_chuyen_doi:.2f}%")
    row2_col4.metric("Gi√° Tr·ªã TB ƒë∆°n (AOV)", f"{gia_tri_tb_don:,.0f} VNƒê")
    row2_col5.metric("S·ªë GD TB / KH", f"{giao_dich_tb_moi_kh:.2f}")
    st.divider()

    # ========================== SO S√ÅNH HI·ªÜU SU·∫§T ==========================
    # (Gi·ªØ nguy√™n to√†n b·ªô ph·∫ßn v·∫Ω bi·ªÉu ƒë·ªì so s√°nh c·ªßa b·∫°n)
    st.subheader("So s√°nh Hi·ªáu su·∫•t")
    tab1, tab2 = st.tabs(["So s√°nh theo Ng∆∞·ªùi ch·∫°y Ads", "So s√°nh theo Chi·∫øn d·ªãch"])

    with tab1:
        # Code v·∫Ω bi·ªÉu ƒë·ªì cho tab 1 c·ªßa b·∫°n...
        st.markdown("#### Ph√¢n t√≠ch t·ªïng quan theo ng∆∞·ªùi ch·∫°y")
        df_sheet_sum = df_filtered.groupby('sheet').agg({
            'Doanh s·ªë': 'sum', 'ƒê·∫ßu t∆∞ ng√¢n s√°ch': 'sum', 'S·ªë L∆∞·ª£ng Kh√°ch H√†ng': 'sum'
        }).reset_index()
        df_sheet_sum['ROAS'] = df_sheet_sum.apply(lambda r: r['Doanh s·ªë'] / r['ƒê·∫ßu t∆∞ ng√¢n s√°ch'] if r['ƒê·∫ßu t∆∞ ng√¢n s√°ch'] > 0 else 0, axis=1)
        df_sheet_sum['CAC'] = df_sheet_sum.apply(lambda r: r['ƒê·∫ßu t∆∞ ng√¢n s√°ch'] / r['S·ªë L∆∞·ª£ng Kh√°ch H√†ng'] if r['S·ªë L∆∞·ª£ng Kh√°ch H√†ng'] > 0 else 0, axis=1)
        if not df_sheet_sum.empty:
            fig_scatter = px.scatter(
                df_sheet_sum, x='CAC', y='ROAS', size='Doanh s·ªë', color='sheet',
                hover_name='sheet', size_max=50, title='Ph√¢n T√≠ch Hi·ªáu Qu·∫£ Ng∆∞·ªùi Ch·∫°y (CAC vs. ROAS)',
                labels={'CAC': 'Chi ph√≠ / Kh√°ch h√†ng m·ªõi (VNƒê)', 'ROAS': 'L·ª£i nhu·∫≠n tr√™n chi ti√™u qu·∫£ng c√°o'}
            )
            fig_scatter.add_annotation(text="<b>G√≥c l√Ω t∆∞·ªüng</b><br>(Chi ph√≠ th·∫•p, L·ª£i nhu·∫≠n cao)",
                align='left', showarrow=False, xref='paper', yref='paper', x=0.05, y=0.95)
            st.plotly_chart(fig_scatter, use_container_width=True)
            with st.expander("üìò H∆∞·ªõng d·∫´n ƒë·ªçc bi·ªÉu ƒë·ªì Ph√¢n T√≠ch Hi·ªáu Qu·∫£"):
                st.write("""...""") # N·ªôi dung h∆∞·ªõng d·∫´n c·ªßa b·∫°n
            fig_bar = px.bar(df_sheet_sum, x='sheet', y=['Doanh s·ªë', 'ƒê·∫ßu t∆∞ ng√¢n s√°ch'], barmode='group',
                                 title="T·ªïng Doanh s·ªë v√† Ng√¢n s√°ch theo Ng∆∞·ªùi ch·∫°y", text_auto=True)
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu c·ªßa ng∆∞·ªùi ch·∫°y ads ƒë·ªÉ hi·ªÉn th·ªã v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.")

    with tab2:
        # Code v·∫Ω bi·ªÉu ƒë·ªì cho tab 2 c·ªßa b·∫°n...
        st.markdown("#### Ph√¢n t√≠ch t·ªïng quan theo chi·∫øn d·ªãch")
        df_camp_sum = df_filtered.groupby(['sheet', 'campaign']).agg({
            'Doanh s·ªë': 'sum', 'ƒê·∫ßu t∆∞ ng√¢n s√°ch': 'sum'
        }).reset_index()
        df_camp_sum['ROAS'] = df_camp_sum.apply(lambda r: r['Doanh s·ªë'] / r['ƒê·∫ßu t∆∞ ng√¢n s√°ch'] if r['ƒê·∫ßu t∆∞ ng√¢n s√°ch'] > 0 else 0, axis=1)
        df_camp_sum = df_camp_sum[df_camp_sum['Doanh s·ªë'] > 0]
        if not df_camp_sum.empty:
            st.markdown("##### C∆° c·∫•u Doanh s·ªë v√† Hi·ªáu qu·∫£ ROAS")
            fig_treemap = px.treemap(
                df_camp_sum, path=[px.Constant("T·∫•t c·∫£ chi·∫øn d·ªãch"), 'sheet', 'campaign'],
                values='Doanh s·ªë', color='ROAS', color_continuous_scale='RdYlGn',
                hover_data={'ROAS': ':.2f', 'ƒê·∫ßu t∆∞ ng√¢n s√°ch': ':,.0f'},
                title='C∆° C·∫•u Doanh S·ªë & Hi·ªáu Qu·∫£ ROAS Theo T·ª´ng Chi·∫øn D·ªãch'
            )
            fig_treemap.update_traces(textinfo='label+value', textfont_size=14)
            st.plotly_chart(fig_treemap, use_container_width=True)
            with st.expander("üìò H∆∞·ªõng d·∫´n ƒë·ªçc bi·ªÉu ƒë·ªì Treemap"):
                st.write("""...""") # N·ªôi dung h∆∞·ªõng d·∫´n c·ªßa b·∫°n
            st.markdown("##### Ph√¢n nh√≥m hi·ªáu su·∫•t chi·∫øn d·ªãch")
            fig_bubble = px.scatter(
                df_camp_sum, x='ƒê·∫ßu t∆∞ ng√¢n s√°ch', y='Doanh s·ªë', size='ROAS',
                color='sheet', hover_name='campaign', title="Ph√¢n Nh√≥m Hi·ªáu Su·∫•t Chi·∫øn D·ªãch", size_max=60
            )
            st.plotly_chart(fig_bubble, use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu chi·∫øn d·ªãch ƒë·ªÉ hi·ªÉn th·ªã v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.")


    # ========================== PH√ÇN T√çCH XU H∆Ø·ªöNG ==========================
    # (Gi·ªØ nguy√™n to√†n b·ªô ph·∫ßn v·∫Ω bi·ªÉu ƒë·ªì xu h∆∞·ªõng c·ªßa b·∫°n)
    st.subheader("Ph√¢n t√≠ch Xu h∆∞·ªõng theo th·ªùi gian")
    if not df_filtered.empty:
        df_trend = df_filtered.groupby('date').agg({
            'Doanh s·ªë': 'sum', 'ƒê·∫ßu t∆∞ ng√¢n s√°ch': 'sum'
        }).reset_index()
        df_trend['ROAS'] = df_trend.apply(lambda r: r['Doanh s·ªë'] / r['ƒê·∫ßu t∆∞ ng√¢n s√°ch'] if r['ƒê·∫ßu t∆∞ ng√¢n s√°ch'] > 0 else 0, axis=1)
        df_trend = df_trend.sort_values('date')
        st.markdown("##### Xu h∆∞·ªõng Doanh s·ªë, Ng√¢n s√°ch v√† ROAS")
        fig_trend = make_subplots(specs=[[{"secondary_y": True}]])
        fig_trend.add_trace(go.Bar(x=df_trend['date'], y=df_trend['ƒê·∫ßu t∆∞ ng√¢n s√°ch'], name='Ng√¢n s√°ch', marker_color='lightsalmon'), secondary_y=False)
        fig_trend.add_trace(go.Scatter(x=df_trend['date'], y=df_trend['Doanh s·ªë'], name='Doanh s·ªë', mode='lines+markers', line=dict(color='royalblue', width=3)), secondary_y=False)
        fig_trend.add_trace(go.Scatter(x=df_trend['date'], y=df_trend['ROAS'], name='ROAS', mode='lines', line=dict(color='lightgreen', dash='dot')), secondary_y=True)
        fig_trend.update_layout(title_text='Xu H∆∞·ªõng T·ªïng Th·ªÉ Theo Th·ªùi Gian', legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1))
        fig_trend.update_xaxes(title_text="Ng√†y")
        fig_trend.update_yaxes(title_text="<b>S·ªë ti·ªÅn (VNƒê)</b>", secondary_y=False)
        fig_trend.update_yaxes(title_text="<b>ROAS</b>", secondary_y=True)
        st.plotly_chart(fig_trend, use_container_width=True)
        with st.expander("üìò H∆∞·ªõng d·∫´n ƒë·ªçc bi·ªÉu ƒë·ªì Xu H∆∞·ªõng"):
            st.write("""...""") # N·ªôi dung h∆∞·ªõng d·∫´n c·ªßa b·∫°n
    else:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu xu h∆∞·ªõng ƒë·ªÉ hi·ªÉn th·ªã v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.")


    # ========================== T·∫¢I XU·ªêNG D·ªÆ LI·ªÜU ==========================
    st.subheader("B·∫£ng D·ªØ li·ªáu chi ti·∫øt (ƒë√£ l·ªçc)")
    st.dataframe(df_filtered)
    excel_data = to_excel(df_filtered)
    st.download_button(
        label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ l·ªçc (.xlsx)",
        data=excel_data,
        file_name="filtered_ad_campaign_data.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# Ch·∫°y h√†m render ch√≠nh
if __name__ == "__main__":
    render_campaign_dashboard()