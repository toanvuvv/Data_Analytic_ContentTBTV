import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO
import re
from datetime import datetime

st.set_page_config(
    page_title="Dashboard Ph√¢n T√≠ch Hi·ªáu Su·∫•t K√™nh Social Media",
    page_icon="üóÉÔ∏è",
    layout="wide"
)

# ========================== CHU·∫®N H√ìA T√äN CH·ªà S·ªê ==========================
# √Ånh x·∫° c√°c t√™n ch·ªâ s·ªë c√≥ th·ªÉ c√≥ t·ª´ file g·ªëc sang t√™n chu·∫©n
# Gi√∫p code linh ho·∫°t h∆°n n·∫øu t√™n trong file thay ƒë·ªïi nh·∫π
METRIC_MAPPING = {
    "Follower": "Follower",
    "L∆∞·ª£t xem (views)": "L∆∞·ª£t xem (views)",
    "Engagement": "Engagement (like/ cmt/ share)",
    "Engagement (like/ cmt/ share)": "Engagement (like/ cmt/ share)",
    "Total content put": "Total content publish",
    "Total content publish": "Total content publish",
    "video clip": "Video/ clips/ Reels",
    "Video/ clips/ Reels": "Video/ clips/ Reels",
    "Reel Text + ·∫¢nh": "Text + ·∫¢nh",
    "Text + ·∫¢nh": "Text + ·∫¢nh",
    "Back - text": "Back + text",
    "Back + text": "Back + text"
}

# Danh s√°ch c√°c ch·ªâ s·ªë chu·∫©n B·∫ÆT BU·ªòC ph·∫£i c√≥ trong ph√¢n t√≠ch
REQUIRED_METRICS = [
    "Follower",
    "L∆∞·ª£t xem (views)",
    "Engagement (like/ cmt/ share)",
    "Total content publish",
    "Video/ clips/ Reels",
    "Text + ·∫¢nh",
    "Back + text"
]

# Danh s√°ch c√°c c·ªôt ch·ªâ s·ªë v·ªÅ lo·∫°i n·ªôi dung
CONTENT_METRICS = [
    "Video/ clips/ Reels",
    "Text + ·∫¢nh",
    "Back + text"
]


# ========================== H√ÄM X·ª¨ L√ù DATA G·ªêC ==========================
def parse_week(week_str, year=None):
    """H√†m chuy·ªÉn ƒë·ªïi chu·ªói tu·∫ßn 'dd/mm - dd/mm' th√†nh datetime."""
    # THAY ƒê·ªîI: T·ª± ƒë·ªông ph√°t hi·ªán nƒÉm n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
    if year is None:
        year = datetime.now().year
        
    m = re.match(r"(\d{1,2})/(\d{1,2}) - (\d{1,2})/(\d{1,2})", str(week_str))
    if m:
        d1, m1, d2, m2 = map(int, m.groups())
        try:
            return datetime(year, m1, d1), datetime(year, m2, d2)
        except ValueError:
            # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p tu·∫ßnË∑®nƒÉm (v√≠ d·ª•: 28/12 - 03/01)
            try:
                if m1 > m2:
                    return datetime(year, m1, d1), datetime(year + 1, m2, d2)
                else:
                    return datetime(year, m1, d1), datetime(year, m2, d2)
            except ValueError:
                 return None, None
    return None, None

def extract_social_data(df, key_cells=None):
    """Tr√≠ch xu·∫•t v√† chu·∫©n h√≥a d·ªØ li·ªáu t·ª´ DataFrame th√¥."""
    rows = df.shape[0]
    all_data = []

    header_row_idx = None
    for i in range(rows):
        # C·ªôt th·ª© 3 (index 2) ch·ª©a 'Ch·ªâ s·ªë'
        if str(df.iloc[i, 2]).strip().lower() == "ch·ªâ s·ªë":
            header_row_idx = i
            break

    if header_row_idx is None:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y d√≤ng ti√™u ƒë·ªÅ 'Ch·ªâ s·ªë' ·ªü c·ªôt C. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u tr√∫c file.")
        return pd.DataFrame()

    header_row = df.iloc[header_row_idx]
    time_cols = [j for j in range(3, df.shape[1]) if pd.notna(header_row[j])]

    channel_data = {}
    if key_cells:
        for i in range(rows):
            for j in range(df.shape[1]):
                cell_value = str(df.iloc[i, j]).strip().upper()
                if cell_value in key_cells:
                    # T√™n k√™nh th∆∞·ªùng ·ªü √¥ k·∫ø b√™n
                    channel_name = str(df.iloc[i, j + 1]).strip() if j + 1 < df.shape[1] and pd.notna(df.iloc[i, j + 1]) else cell_value
                    channel_data[i] = {"K√™nh": cell_value, "T√™n k√™nh": channel_name}
                    break

    for r in range(header_row_idx + 1, rows):
        metric_raw = str(df.iloc[r, 2]).strip()
        if not metric_raw or metric_raw.lower().startswith("b√°o c√°o"):
            continue

        current_channel_info = {}
        for section_start_row, info in channel_data.items():
            if r >= section_start_row:
                current_channel_info = info
        
        if not current_channel_info:
            continue

        channel = current_channel_info.get("K√™nh", "N/A")
        channel_name = current_channel_info.get("T√™n k√™nh", "N/A")
        
        metric_standard = METRIC_MAPPING.get(metric_raw, metric_raw)

        for c in time_cols:
            time_label = str(header_row[c]).strip()
            value = df.iloc[r, c]

            if pd.isna(value) or value == "":
                continue

            numeric_value = pd.to_numeric(value, errors='coerce')
            if pd.isna(numeric_value):
                continue

            start_date, end_date = parse_week(time_label)
            time_type = "Th√°ng" if "th√°ng" in time_label.lower() else "Tu·∫ßn"

            all_data.append({
                "K√™nh": channel,
                "T√™n k√™nh": channel_name,
                "Ch·ªâ s·ªë th√¥": metric_raw,
                "Ch·ªâ s·ªë chu·∫©n": metric_standard,
                "Lo·∫°i th·ªùi gian": time_type,
                "M·ªëc th·ªùi gian": time_label,
                "Ng√†y B·∫Øt ƒê·∫ßu": start_date,
                "Ng√†y K·∫øt Th√∫c": end_date,
                "Gi√° tr·ªã": numeric_value,
            })

    if not all_data:
        return pd.DataFrame()

    df_out = pd.DataFrame(all_data)
    df_out['Gi√° tr·ªã'] = pd.to_numeric(df_out['Gi√° tr·ªã'], errors='coerce').fillna(0)
    return df_out

def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='FilteredData')
    return output.getvalue()

# ========================== GIAO DI·ªÜN DASHBOARD ==========================
st.title("üìä Dashboard Ph√¢n T√≠ch Hi·ªáu Su·∫•t K√™nh Social Media")
st.sidebar.header("Nh·∫≠p D·ªØ Li·ªáu")

data_source = st.sidebar.radio(
    "Ch·ªçn ngu·ªìn d·ªØ li·ªáu:",
    options=['Upload file Excel', 'Google Sheet (link public share)'],
    horizontal=True
)

key_cell_input = st.sidebar.text_input(
    "Nh·∫≠p danh s√°ch key cell (ph√¢n t√°ch b·ªüi d·∫•u ph·∫©y):", value="FB,TT,OA"
)
key_cells = [s.strip().upper() for s in key_cell_input.split(",") if s.strip()]

df_raw = None
if data_source == 'Upload file Excel':
    uploaded_file = st.sidebar.file_uploader("Ch·ªçn file Excel c·ªßa b·∫°n", type=["xlsx", "xls"])
    if uploaded_file:
        try:
            df_raw = pd.read_excel(uploaded_file, header=None, engine='openpyxl')
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω file Excel: {e}")
elif data_source == 'Google Sheet (link public share)':
    sheet_url = st.sidebar.text_input("D√°n link Google Sheet ƒë√£ share (Anyone with the link):")
    if sheet_url:
        try:
            csv_export_url = sheet_url.replace('/edit?usp=sharing', '/export?format=csv').replace('/edit', '/export?format=csv')
            df_raw = pd.read_csv(csv_export_url, header=None)
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc Google Sheet. H√£y ch·∫Øc ch·∫Øn link l√† public v√† ·ªü ƒë·ªãnh d·∫°ng ƒë√∫ng. L·ªói: {e}")

if df_raw is None:
    st.info("üí° Vui l√≤ng nh·∫≠p d·ªØ li·ªáu ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")
    st.stop()

# ========== X·ª¨ L√ù & CHU·∫®N H√ìA DATA ==========z
df_long = extract_social_data(df_raw, key_cells=key_cells)
if df_long.empty:
    st.warning("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d·ªØ li·ªáu h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i file ƒë·∫ßu v√†o v√† c√°c key cell ƒë√£ nh·∫≠p.")
    st.stop()

pivot_cols = ['K√™nh', 'T√™n k√™nh', 'Ng√†y B·∫Øt ƒê·∫ßu', 'Ng√†y K·∫øt Th√∫c', 'M·ªëc th·ªùi gian', 'Lo·∫°i th·ªùi gian']
df_wide = df_long.pivot_table(index=pivot_cols, columns='Ch·ªâ s·ªë chu·∫©n', values='Gi√° tr·ªã', aggfunc='sum').reset_index()

for col in REQUIRED_METRICS:
    if col not in df_wide.columns:
        df_wide[col] = 0
    else:
        df_wide[col] = pd.to_numeric(df_wide[col], errors='coerce').fillna(0)

df_wide = df_wide[pivot_cols + REQUIRED_METRICS]

# ========== B·ªò L·ªåC ==========
st.sidebar.header("B·ªô L·ªçc:")

# THAY ƒê·ªîI: L·ªçc theo 'T√™n k√™nh' thay v√¨ 'K√™nh'
unique_channel_names = sorted(df_wide['T√™n k√™nh'].unique())
selected_channel_names = st.sidebar.multiselect(
    "Ch·ªçn T√™n K√™nh:", # THAY ƒê·ªîI: S·ª≠a l·∫°i nh√£n
    options=unique_channel_names,
    default=list(unique_channel_names)
)

valid_dates = df_wide['Ng√†y B·∫Øt ƒê·∫ßu'].dropna()
if valid_dates.empty:
    st.error("Kh√¥ng c√≥ d·ªØ li·ªáu ng√†y h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y trong file.")
    st.stop()

min_date, max_date = valid_dates.min().date(), valid_dates.max().date()

selected_date_range = st.sidebar.date_input(
    "Ch·ªçn kho·∫£ng th·ªùi gian:",
    value=(min_date, max_date),
    min_value=min_date,
    max_value=max_date,
    format="DD/MM/YYYY"
)

if len(selected_date_range) != 2:
    st.warning("Vui l√≤ng ch·ªçn ƒë·ªß ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c.")
    st.stop()
start_date, end_date = selected_date_range

# THAY ƒê·ªîI: L·ªçc d·ªØ li·ªáu theo 'T√™n k√™nh' ƒë√£ ch·ªçn
df_filtered = df_wide[
    (df_wide['T√™n k√™nh'].isin(selected_channel_names)) &
    (df_wide['Ng√†y B·∫Øt ƒê·∫ßu'].dt.date >= start_date) &
    (df_wide['Ng√†y B·∫Øt ƒê·∫ßu'].dt.date <= end_date)
].copy()

if df_filtered.empty:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho l·ª±a ch·ªçn c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i v·ªõi b·ªô l·ªçc kh√°c.")
    st.stop()

# ========== KPI T·ªîNG QUAN ==========
st.header("T·ªïng Quan Hi·ªáu Su·∫•t (Performance KPIs)")

total_views = int(df_filtered["L∆∞·ª£t xem (views)"].sum())
total_engagement = int(df_filtered["Engagement (like/ cmt/ share)"].sum())
total_content = int(df_filtered["Total content publish"].sum())

# THAY ƒê·ªîI: L·∫•y follower cu·ªëi k·ª≥ nh√≥m theo 'T√™n k√™nh'
latest_followers_per_channel = df_filtered.sort_values('Ng√†y B·∫Øt ƒê·∫ßu').groupby('T√™n k√™nh').tail(1)
total_followers_end_period = int(latest_followers_per_channel['Follower'].sum())

col1, col2, col3, col4 = st.columns(4)
col1.metric("T·ªïng L∆∞·ª£t xem (Views)", f"{total_views:,}")
col2.metric("T·ªïng T∆∞∆°ng t√°c (Engagement)", f"{total_engagement:,}")
col3.metric("Follower (Cu·ªëi k·ª≥)", f"{total_followers_end_period:,}")
col4.metric("T·ªïng s·ªë b√†i ƒëƒÉng", f"{total_content:,}")

st.markdown("---")

# ========== BI·ªÇU ƒê·ªí ==========
st.header("Ph√¢n T√≠ch Chi Ti·∫øt")
c1, c2 = st.columns((6, 4))

with c1:
    st.subheader("üìà Xu H∆∞·ªõng Theo Th·ªùi Gian")
    y_cols_trends = ["L∆∞·ª£t xem (views)", "Engagement (like/ cmt/ share)"]
    try:
        fig_trends = px.line(
            df_filtered,
            x='Ng√†y B·∫Øt ƒê·∫ßu',
            y=y_cols_trends,
            color='T√™n k√™nh', # THAY ƒê·ªîI: Ph√¢n m√†u theo 'T√™n k√™nh'
            title='Xu H∆∞·ªõng L∆∞·ª£t Xem v√† T∆∞∆°ng T√°c',
            labels={'value': 'S·ªë l∆∞·ª£ng', 'variable': 'Ch·ªâ s·ªë', 'Ng√†y B·∫Øt ƒê·∫ßu': 'Ng√†y'},
            markers=True
        )
        fig_trends.update_layout(legend_title_text='T√™n k√™nh') # THAY ƒê·ªîI
        st.plotly_chart(fig_trends, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì xu h∆∞·ªõng: {e}")

    try:
        fig_followers = px.line(
            df_filtered,
            x='Ng√†y B·∫Øt ƒê·∫ßu',
            y='Follower',
            color='T√™n k√™nh', # THAY ƒê·ªîI: Ph√¢n m√†u theo 'T√™n k√™nh'
            title='TƒÉng Tr∆∞·ªüng Follower',
            labels={'Follower': 'S·ªë l∆∞·ª£ng Follower', 'Ng√†y B·∫Øt ƒê·∫ßu': 'Ng√†y'},
            markers=True
        )
        fig_followers.update_layout(legend_title_text='T√™n k√™nh') # THAY ƒê·ªîI
        st.plotly_chart(fig_followers, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì follower: {e}")

with c2:
    st.subheader("üìä So S√°nh Hi·ªáu Su·∫•t Gi·ªØa C√°c K√™nh")
    try:
        # THAY ƒê·ªîI: Nh√≥m d·ªØ li·ªáu theo 'T√™n k√™nh'
        df_grouped = df_filtered.groupby('T√™n k√™nh').agg({
            "L∆∞·ª£t xem (views)": 'sum',
            "Engagement (like/ cmt/ share)": 'sum'
        }).reset_index()

        fig_bar_views = px.bar(
            df_grouped.sort_values("L∆∞·ª£t xem (views)", ascending=False),
            x='T√™n k√™nh', # THAY ƒê·ªîI
            y="L∆∞·ª£t xem (views)",
            title='T·ªïng L∆∞·ª£t Xem Theo T√™n K√™nh',
            text_auto=True,
            labels={"L∆∞·ª£t xem (views)": 'T·ªïng l∆∞·ª£t xem', "T√™n k√™nh": "T√™n K√™nh"}
        )
        st.plotly_chart(fig_bar_views, use_container_width=True)

        fig_bar_eng = px.bar(
            df_grouped.sort_values("Engagement (like/ cmt/ share)", ascending=False),
            x='T√™n k√™nh', # THAY ƒê·ªîI
            y="Engagement (like/ cmt/ share)",
            title='T·ªïng T∆∞∆°ng T√°c Theo T√™n K√™nh',
            text_auto=True,
            labels={"Engagement (like/ cmt/ share)": 'T·ªïng t∆∞∆°ng t√°c', "T√™n k√™nh": "T√™n K√™nh"}
        )
        st.plotly_chart(fig_bar_eng, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì so s√°nh: {e}")

# ========== BI·ªÇU ƒê·ªí C∆† C·∫§U N·ªòI DUNG ==========
st.header("Ph√¢n T√≠ch C∆° C·∫•u N·ªôi Dung")
try:
    content_totals = df_filtered[CONTENT_METRICS].sum()
    content_totals = content_totals[content_totals > 0] 

    if not content_totals.empty:
        fig_pie_content = px.pie(
            names=content_totals.index,
            values=content_totals.values,
            title='T·ª∑ Tr·ªçng C√°c Lo·∫°i N·ªôi Dung ƒê√£ ƒêƒÉng',
            hole=0.3
        )
        fig_pie_content.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig_pie_content, use_container_width=True)
    else:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu v·ªÅ lo·∫°i n·ªôi dung trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")
except Exception as e:
    st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì c∆° c·∫•u n·ªôi dung: {e}")

# ========== B·∫¢NG CHI TI·∫æT & DOWNLOAD ==========
st.markdown("---")
st.header("B·∫£ng D·ªØ Li·ªáu Chi Ti·∫øt")
st.dataframe(df_filtered)

try:
    excel_data = to_excel(df_filtered)
    st.download_button(
        label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ l·ªçc (Excel)",
        data=excel_data,
        file_name=f"filtered_data_{start_date.strftime('%Y%m%d')}_to_{end_date.strftime('%Y%m%d')}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
except Exception as e:
    st.error(f"L·ªói khi t·∫°o file Excel ƒë·ªÉ t·∫£i xu·ªëng: {e}")