import streamlit as st
import pandas as pd
from io import BytesIO, StringIO
import plotly.express as px

st.set_page_config(page_title="Ad Campaign Dashboard", layout="wide")

st.sidebar.title("Upload file Excel")
uploaded_file = st.sidebar.file_uploader("Ch·ªçn file Excel", type=["xlsx"])

# HARD-CODE DANH S√ÅCH NH√ÇN VI√äN (sheet name)
# Thay ƒë·ªïi t√™n sheet cho ph√π h·ª£p v·ªõi file c·ªßa b·∫°n
SHEETS_TO_READ = ["duyanh","duc"]  # Th√™m/x√≥a t√™n sheet ·ªü ƒë√¢y

if uploaded_file:
    xls = pd.ExcelFile(uploaded_file)
    st.sidebar.write(f"File c√≥ {len(xls.sheet_names)} sheet:")
    st.sidebar.write(xls.sheet_names)
    st.sidebar.success(f"S·∫Ω ph√¢n t√≠ch c√°c sheet: {SHEETS_TO_READ}")
else:
    st.info("Vui l√≤ng upload file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")
    st.stop() # D·ª´ng th·ª±c thi n·∫øu ch∆∞a c√≥ file

# =========== 2. Extract d·ªØ li·ªáu (function) ==============
def extract_camp_blocks(df):
    """
    Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ c√°c block campaign,
    Lo·∫°i b·ªè c·ªôt T·ªïng khi l·∫•y date_cols.
    """
    all_data = []
    current_camp = None
    date_cols = []
    for i, row in df.iterrows():
        # N·∫øu l√† d√≤ng b·∫Øt ƒë·∫ßu campaign
        if str(row.iloc[0]).lower().strip() == 'camp':
            current_camp = str(row.iloc[1]).strip() if pd.notnull(row.iloc[1]) else None
            # L·ªçc ch·ªâ l·∫•y c√°c gi√° tr·ªã l√† ng√†y, lo·∫°i b·ªè "T·ªïng"
            date_cols = [
                v for v in row.iloc[2:].dropna()
                if str(v).strip().lower() != "t·ªïng" and not str(v).strip().lower().startswith("t·ªïng")
            ]
            continue

        # N·∫øu ƒë√£ x√°c ƒë·ªãnh block campaign, v√† d√≤ng n√†y l√† ch·ªâ s·ªë (c·ªôt B c√≥ t√™n ch·ªâ s·ªë)
        if current_camp and pd.notnull(row.iloc[1]) and str(row.iloc[1]).strip() != "":
            criteria = str(row.iloc[1]).strip()
            for idx, date in enumerate(date_cols):
                value = row.iloc[idx+2] if (idx+2)<len(row) else None
                # N·∫øu value b·ªã r·ªóng/null/chu·ªói tr·∫Øng, chuy·ªÉn th√†nh 0
                if pd.isnull(value) or str(value).strip() == '':
                    value = 0
                if pd.notnull(date):
                    all_data.append({
                        'campaign': current_camp,
                        'criteria': criteria,
                        'date': date,
                        'value': value
                    })
    return pd.DataFrame(all_data)


# =========== 3. ƒê·ªçc & x·ª≠ l√Ω d·ªØ li·ªáu ===========
if uploaded_file:
    all_df = []
    # st.divider()
    # st.header("üî¨ Qu√° tr√¨nh x·ª≠ l√Ω & Debug")

    for sheet in SHEETS_TO_READ:
        # st.subheader(f"ƒêang x·ª≠ l√Ω Sheet: '{sheet}'")
        try:
            # ƒê·ªçc file kh√¥ng c√≥ header
            df_raw = pd.read_excel(uploaded_file, sheet_name=sheet, header=None)
            
            # # --- DEBUG: HI·ªÇN TH·ªä D·ªÆ LI·ªÜU TH√î ---
            # st.write(f"üêû **DEBUG 1:** D·ªØ li·ªáu th√¥ ƒë·ªçc t·ª´ sheet '{sheet}' (5 d√≤ng ƒë·∫ßu)")
            # st.dataframe(df_raw.head())

            # B·ªè qua d√≤ng header g·ªëc v√† reset index
            df = df_raw.copy() # S·ª≠ d·ª•ng copy ƒë·ªÉ tr√°nh SettingWithCopyWarning
            df = df.reset_index(drop=True)

            # Tr√≠ch xu·∫•t d·ªØ li·ªáu
            df_extracted = extract_camp_blocks(df)

            # # --- DEBUG: HI·ªÇN TH·ªä D·ªÆ LI·ªÜU ƒê√É TR√çCH XU·∫§T ---
            # st.write(f"üêû **DEBUG 2:** D·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t t·ª´ sheet '{sheet}'")
            if not df_extracted.empty:
                # st.dataframe(df_extracted)
                df_extracted['sheet'] = sheet
                all_df.append(df_extracted)
            # else:
                # st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ sheet '{sheet}'. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng.")

        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc ho·∫∑c x·ª≠ l√Ω sheet '{sheet}': {e}")

    # === Ki·ªÉm tra sau khi tr√≠ch xu·∫•t t·ª´ t·∫•t c·∫£ c√°c sheet ===
    if not all_df:
        st.error("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ b·∫•t k·ª≥ sheet n√†o ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n sheet v√† ƒë·ªãnh d·∫°ng file.")
        st.stop()

    # Gh√©p c√°c dataframe l·∫°i
    df_full = pd.concat(all_df, ignore_index=True)

    # # --- DEBUG: HI·ªÇN TH·ªä D·ªÆ LI·ªÜU T·ªîNG H·ª¢P ---
    # st.subheader("T·ªïng h·ª£p d·ªØ li·ªáu t·ª´ c√°c sheet")
    # st.write("üêû **DEBUG 3:** D·ªØ li·ªáu t·ªïng h·ª£p t·ª´ t·∫•t c·∫£ c√°c sheet (tr∆∞·ªõc khi xoay b·∫£ng)")
    # st.dataframe(df_full)

    # Xoay b·∫£ng ƒë·ªÉ c√°c ch·ªâ s·ªë th√†nh c·ªôt
    df_pivot = df_full.pivot_table(
        index=['sheet', 'campaign', 'date'],
        columns='criteria',
        values='value',
        aggfunc='first'
    ).reset_index()
    
    # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu cho c√°c c·ªôt s·ªë li·ªáu quan tr·ªçng
    # Danh s√°ch c√°c c·ªôt c·∫ßn chuy·ªÉn ƒë·ªïi, b·∫°n c√≥ th·ªÉ th√™m/b·ªõt n·∫øu c·∫ßn
    numeric_cols = ['Doanh s·ªë', 'ƒê·∫ßu t∆∞ ng√¢n s√°ch', 'Chi ph√≠ KH m·ªõi', 'KH Ti·ªÅm NƒÉng (Mess)']
    for col in numeric_cols:
        if col in df_pivot.columns:
            # errors='coerce' s·∫Ω bi·∫øn c√°c gi√° tr·ªã kh√¥ng ph·∫£i s·ªë th√†nh NaN (Not a Number)
            df_pivot[col] = pd.to_numeric(df_pivot[col], errors='coerce')

    # # --- DEBUG: HI·ªÇN TH·ªä D·ªÆ LI·ªÜU SAU KHI PIVOT ---
    # st.write("üêû **DEBUG 4:** D·ªØ li·ªáu sau khi xoay b·∫£ng (pivot) v√† chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu")
    # st.dataframe(df_pivot)
    
    # # Ghi l·∫°i th√¥ng tin ki·ªÉu d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
    # st.write("Ki·ªÉu d·ªØ li·ªáu c·ªßa c√°c c·ªôt sau khi x·ª≠ l√Ω:")
    # # Chuy·ªÉn dtypes th√†nh chu·ªói ƒë·ªÉ st.text c√≥ th·ªÉ hi·ªÉn th·ªã
    # buffer = StringIO()
    # df_pivot.info(buf=buffer)
    # s = buffer.getvalue()
    # st.text(s)


    # =========== T√çNH TO√ÅN KPI T·ªîNG QUAN =============
    # Fillna(0) ƒë·ªÉ c√°c ph√©p t√≠nh kh√¥ng b·ªã l·ªói n·∫øu c√≥ gi√° tr·ªã r·ªóng
    tong_doanh_so = df_pivot['Doanh s·ªë'].sum() if 'Doanh s·ªë' in df_pivot.columns else 0
    tong_ngan_sach = df_pivot['ƒê·∫ßu t∆∞ ng√¢n s√°ch'].sum() if 'ƒê·∫ßu t∆∞ ng√¢n s√°ch' in df_pivot.columns else 0
    # D√πng .sum() v√¨ KH Ti·ªÅm NƒÉng (Mess) ƒë√£ ƒë∆∞·ª£c t√°ch ra theo ng√†y
    tong_kh_moi = df_pivot['KH Ti·ªÅm NƒÉng (Mess)'].sum() if 'KH Ti·ªÅm NƒÉng (Mess)' in df_pivot.columns else 0
    roas = tong_doanh_so / tong_ngan_sach if tong_ngan_sach > 0 else 0

    st.divider()
    # =========== II. MAIN AREA - DASHBOARD =============
    st.header("üìä Dashboard Qu·∫£n l√Ω Qu·∫£ng c√°o")
    st.subheader("KPI T·ªïng quan")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("T·ªïng Doanh s·ªë", f"{tong_doanh_so:,.0f} VNƒê")
    col2.metric("T·ªïng Ng√¢n s√°ch", f"{tong_ngan_sach:,.0f} VNƒê")
    col3.metric("ROAS T·ªïng th·ªÉ", f"{roas:.2f}")
    col4.metric("T·ªïng S·ªë KH M·ªõi (Mess)", f"{tong_kh_moi:,.0f}")

    st.divider()
    st.subheader("So s√°nh Hi·ªáu su·∫•t")
    tab1, tab2 = st.tabs(["So s√°nh theo Ng∆∞·ªùi ch·∫°y Ads", "So s√°nh theo Chi·∫øn d·ªãch"])

    with tab1:
        st.markdown("#### Doanh s·ªë, Ng√¢n s√°ch v√† ROAS theo ng∆∞·ªùi ch·∫°y")
        # Gom nh√≥m theo sheet (ng∆∞·ªùi ch·∫°y)
        df_sheet_sum = df_pivot.groupby('sheet').agg({
            'Doanh s·ªë': 'sum',
            'ƒê·∫ßu t∆∞ ng√¢n s√°ch': 'sum',
            'KH Ti·ªÅm NƒÉng (Mess)': 'sum'
        }).reset_index()
        
        df_sheet_sum['ROAS'] = df_sheet_sum['Doanh s·ªë'] / df_sheet_sum['ƒê·∫ßu t∆∞ ng√¢n s√°ch']
        # T√≠nh CAC (Chi ph√≠ cho m·ªói kh√°ch h√†ng m·ªõi)
        if 'KH Ti·ªÅm NƒÉng (Mess)' in df_sheet_sum.columns:
            df_sheet_sum['CAC'] = df_sheet_sum['ƒê·∫ßu t∆∞ ng√¢n s√°ch'] / df_sheet_sum['KH Ti·ªÅm NƒÉng (Mess)']


        fig = px.bar(df_sheet_sum, x='sheet', y=['Doanh s·ªë', 'ƒê·∫ßu t∆∞ ng√¢n s√°ch'], barmode='group',
                     title="T·ªïng Doanh s·ªë v√† Ng√¢n s√°ch theo Ng∆∞·ªùi ch·∫°y", text_auto=True)
        st.plotly_chart(fig, use_container_width=True)

        fig2 = px.bar(df_sheet_sum, x='sheet', y='ROAS', title="So s√°nh ROAS gi·ªØa c√°c Ng∆∞·ªùi ch·∫°y", text_auto='.2f')
        st.plotly_chart(fig2, use_container_width=True)
        
        if 'CAC' in df_sheet_sum.columns:
            fig3 = px.bar(df_sheet_sum, x='sheet', y='CAC', title="Chi ph√≠ m·ªói KH m·ªõi (CAC)", text_auto=',.0f')
            st.plotly_chart(fig3, use_container_width=True)

    with tab2:
        st.markdown("#### Ph√¢n t√≠ch hi·ªáu su·∫•t c√°c chi·∫øn d·ªãch")
        # T√≠nh to√°n tr√™n t·ª´ng chi·∫øn d·ªãch
        df_camp_sum = df_pivot.groupby(['sheet', 'campaign']).agg({
             'Doanh s·ªë': 'sum',
            'ƒê·∫ßu t∆∞ ng√¢n s√°ch': 'sum'
        }).reset_index()
        df_camp_sum['ROAS'] = df_camp_sum['Doanh s·ªë'] / df_camp_sum['ƒê·∫ßu t∆∞ ng√¢n s√°ch']
        df_camp_sum = df_camp_sum.sort_values('ROAS', ascending=False)
        
        st.markdown("##### Top 10 chi·∫øn d·ªãch theo ROAS")
        top_roas = df_camp_sum.head(10)
        fig4 = px.bar(top_roas, x='campaign', y='ROAS', color='sheet', text_auto='.2f')
        st.plotly_chart(fig4, use_container_width=True)

        st.markdown("##### Top 10 chi·∫øn d·ªãch theo Doanh s·ªë")
        top_sales = df_camp_sum.sort_values('Doanh s·ªë', ascending=False).head(10)
        fig5 = px.bar(top_sales, x='campaign', y='Doanh s·ªë', color='sheet', text_auto=True)
        st.plotly_chart(fig5, use_container_width=True)

        st.markdown("##### Bi·ªÉu ƒë·ªì Bong b√≥ng (Ng√¢n s√°ch vs. Doanh s·ªë vs. ROAS)")
        # Lo·∫°i b·ªè c√°c chi·∫øn d·ªãch kh√¥ng c√≥ ng√¢n s√°ch ho·∫∑c doanh s·ªë ƒë·ªÉ bi·ªÉu ƒë·ªì r√µ r√†ng h∆°n
        df_camp_plot = df_camp_sum[(df_camp_sum['ƒê·∫ßu t∆∞ ng√¢n s√°ch'] > 0) & (df_camp_sum['Doanh s·ªë'] > 0)]
        fig6 = px.scatter(
            df_camp_plot,
            x='ƒê·∫ßu t∆∞ ng√¢n s√°ch',
            y='Doanh s·ªë',
            size='ROAS',
            color='sheet',
            hover_name='campaign',
            title="Ph√¢n nh√≥m hi·ªáu su·∫•t chi·∫øn d·ªãch",
            size_max=60
        )
        st.plotly_chart(fig6, use_container_width=True)


    st.subheader("Ph√¢n t√≠ch Xu h∆∞·ªõng theo th·ªùi gian")
    # ƒê·∫£m b·∫£o c·ªôt date c√≥ ƒë·ªãnh d·∫°ng datetime ƒë·ªÉ s·∫Øp x·∫øp ƒë√∫ng
    df_pivot['date'] = pd.to_datetime(df_pivot['date'], errors='coerce')
    df_pivot_time = df_pivot.dropna(subset=['date'])

    # Th√™m l·ª±a ch·ªçn t√≠nh ROAS v√†o df_pivot_time
    if 'Doanh s·ªë' in df_pivot_time.columns and 'ƒê·∫ßu t∆∞ ng√¢n s√°ch' in df_pivot_time.columns:
        # Tr√°nh chia cho 0
        df_pivot_time['ROAS'] = df_pivot_time.apply(
            lambda row: row['Doanh s·ªë'] / row['ƒê·∫ßu t∆∞ ng√¢n s√°ch'] if row['ƒê·∫ßu t∆∞ ng√¢n s√°ch'] > 0 else 0,
            axis=1
        )
        metrics = ['Doanh s·ªë', 'ƒê·∫ßu t∆∞ ng√¢n s√°ch', 'ROAS']
    else:
        metrics = ['Doanh s·ªë', 'ƒê·∫ßu t∆∞ ng√¢n s√°ch']


    metric = st.selectbox("Ch·ªçn ch·ªâ s·ªë ƒë·ªÉ xem xu h∆∞·ªõng", metrics)
    group_by = st.radio("Nh√≥m theo", ['sheet', 'campaign'], horizontal=True)

    fig7 = px.line(
        df_pivot_time.sort_values('date'),
        x='date',
        y=metric,
        color=group_by,
        title=f"Xu h∆∞·ªõng {metric} theo th·ªùi gian",
        markers=True
    )
    st.plotly_chart(fig7, use_container_width=True)


    st.subheader("T·∫£i xu·ªëng D·ªØ li·ªáu chi ti·∫øt ƒë√£ x·ª≠ l√Ω")
    st.dataframe(df_pivot)
    out_buffer = BytesIO()
    # Chuy·ªÉn df_pivot sang excel v√† ghi v√†o buffer
    with pd.ExcelWriter(out_buffer, engine='xlsxwriter') as writer:
        df_pivot.to_excel(writer, index=False, sheet_name='processed_data')
    
    st.download_button(
        label="T·∫£i d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω (.xlsx)",
        data=out_buffer.getvalue(),
        file_name="data_processed.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
